[{"categories":["日记"],"content":"前几天去平遥古城转了转，整个古城基本上保存了明清时期的原貌。站在城墙上眺望，非常壮观。小吃很多，我最喜欢平遥牛肉和碗托！ 没有拍到好看的照片，这里就放两张我在南城墙上拍到的。 南城门\" 南城门 红衣大炮\" 红衣大炮 ","date":"2022-02-13","objectID":"/zh-cn/pingyao-ancient-city/:0:0","tags":["转悠"],"title":"平遥古城","uri":"/zh-cn/pingyao-ancient-city/"},{"categories":["笔记"],"content":"一个双向链表的C++模版。 #include \u003ciostream\u003eusing namespace std; struct ListNode { int val; ListNode *next, *prior; ListNode() : val(0), next(nullptr), prior(nullptr) {} ListNode(int v) : val(v), next(nullptr), prior(nullptr) {} ListNode(int v, ListNode *next, ListNode *prior) : val(v), next(next), prior(prior) {} }; ListNode *insert(ListNode *p, int val) { ListNode *n = new ListNode; n-\u003eval = val; n-\u003enext = p-\u003enext; p-\u003enext = n; n-\u003eprior = p; if (n-\u003enext != nullptr) n-\u003enext-\u003eprior = n; return n; } void erase(ListNode *p) { p-\u003eprior-\u003enext = p-\u003enext; if (p-\u003enext != nullptr) p-\u003enext-\u003eprior = p-\u003eprior; delete p; } void print(ListNode *p) { if (p != nullptr) { cout \u003c\u003c p-\u003eval; p = p-\u003enext; } while (p != nullptr) { cout \u003c\u003c \" -\u003e \" \u003c\u003c p-\u003eval; p = p-\u003enext; } cout \u003c\u003c endl; } int main() { ListNode *front = new ListNode(1); ListNode *n = insert(insert(insert(front, 2), 4)-\u003eprior, 3); print(front); // 1 -\u003e 2 -\u003e 3 -\u003e 4 erase(n); print(front); // 1 -\u003e 2 -\u003e 4 return 0; } LeetCode 21. Merge Two Sorted Lists class Solution { public: ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) { if (list1 == nullptr \u0026\u0026 list2 == nullptr) return nullptr; else if (list1 == nullptr) return list2; else if (list2 == nullptr) return list1; else { ListNode *front, *p, *p1, *p2; if (list1-\u003eval \u003c= list2-\u003eval) { front = list1; p1 = list1-\u003enext; p2 = list2; } else { front = list2; p1 = list1; p2 = list2-\u003enext; } p = front; while (p1 != nullptr \u0026\u0026 p2 != nullptr) { if (p1-\u003eval \u003c= p2-\u003eval) { p-\u003enext = p1; p1 = p1-\u003enext; } else { p-\u003enext = p2; p2 = p2-\u003enext; } p = p-\u003enext; } if (p1 == nullptr) p-\u003enext = p2; else p-\u003enext = p1; return front; } } }; LeetCode 23. Merge k Sorted Lists 直接用这个方法导致Time Limit Exceeded， class Solution { public: ListNode *mergeKLists(vector\u003cListNode *\u003e \u0026lists) { int flag = 0, min = 0x3f3f3f; ListNode *front, *p, *p1; unordered_map\u003cListNode *, ListNode *\u003e ptr; vector\u003cListNode *\u003e ps; for (auto list : lists) { if (list != nullptr) { flag = 1; ptr[list] = list; if (list-\u003eval \u003c min) { min = list-\u003eval; front = list; } } } if (!lists.size() || !flag) return nullptr; else { ptr[front] = ptr[front]-\u003enext; p = front; while (true) { flag = 0, min = 0x3f3f3f; for (auto list : lists) { if (ptr[list] != nullptr) { flag = 1; if (ptr[list]-\u003eval \u003c min) { min = ptr[list]-\u003eval; p1 = list; } } } if (!flag) break; p-\u003enext = ptr[p1]; p = p-\u003enext; ptr[p1] = ptr[p1]-\u003enext; } return front; } } }; 用优先队列就可以通过了。 class Solution { public: ListNode *mergeKLists(vector\u003cListNode *\u003e \u0026lists) { ListNode *front, *p; auto cmp = [](ListNode *a, ListNode *b) { return a-\u003eval \u003e= b-\u003eval; }; // ptr.top() is minimal. priority_queue\u003cListNode *, vector\u003cListNode *\u003e, decltype(cmp)\u003e ptr(cmp); for (auto list : lists) { if (list != nullptr) ptr.push(list); } if (!lists.size() || ptr.empty()) return nullptr; else { front = ptr.top(); ptr.pop(); if (front-\u003enext != nullptr) ptr.push(front-\u003enext); p = front; while (!ptr.empty()) { p-\u003enext = ptr.top(); ptr.pop(); p = p-\u003enext; if (p-\u003enext != nullptr) ptr.push(p-\u003enext); } return front; } } }; ","date":"2022-01-31","objectID":"/zh-cn/linked-list/:0:0","tags":["链表","优先队列","数据结构","C++","LeetCode"],"title":"链表","uri":"/zh-cn/linked-list/"},{"categories":["笔记"],"content":"这是二分查找算法的一个C++模版，以及C++标准模版库\u003calgorithm\u003e头文件中二分查找函数std::lower_bound和std::upper_bound的简单应用。 #include \u003calgorithm\u003e#include \u003ciostream\u003eusing namespace std; int nums[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; int binary_search(int left, int right, int key) { int pos = -1, mid; while (left \u003c= right) { mid = left + (right - left) / 2; if (key \u003e nums[mid]) left = mid + 1; else if (key \u003c nums[mid]) right = mid - 1; else { pos = mid; break; } } return pos; } int main() { cout \u003c\u003c binary_search(0, 9, 3) \u003c\u003c endl; // 2 cout \u003c\u003c lower_bound(nums, nums + 10, 3) - nums \u003c\u003c endl; // 2, \u003e= 3 cout \u003c\u003c upper_bound(nums, nums + 10, 3) - nums \u003c\u003c endl; // 3, \u003e 3 return 0; } 用这个模版做了一道LeetCode的34. Find First and Last Position of Element in Sorted Array。 class Solution { public: vector\u003cint\u003e searchRange(vector\u003cint\u003e\u0026 nums, int target) { if (!nums.size()) return vector\u003cint\u003e{-1, -1}; else { int pos = binary_search(nums, 0, nums.size() - 1, target); if (pos == -1) return vector\u003cint\u003e{-1, -1}; else { int left = pos - 1, right = pos + 1, size = nums.size(); while (left \u003e= 0 \u0026\u0026 nums[left] == target) --left; while (right \u003c size \u0026\u0026 nums[right] == target) ++right; return vector\u003cint\u003e{left + 1, right - 1}; } } } int binary_search(vector\u003cint\u003e nums, int left, int right, int key) { int pos = -1, mid; while (left \u003c= right) { mid = left + (right - left) / 2; if (key \u003e nums[mid]) left = mid + 1; else if (key \u003c nums[mid]) right = mid - 1; else { pos = mid; break; } } return pos; } }; ","date":"2022-01-29","objectID":"/zh-cn/binary-search/:0:0","tags":["查找","算法","C++","LeetCode"],"title":"二分查找","uri":"/zh-cn/binary-search/"},{"categories":["日记"],"content":"今天出来走了走，拍了一些照片。蓝蓝的天，感觉真不错！ 天安门城楼\" 天安门城楼 人民英雄纪念碑（北面）\" 人民英雄纪念碑（北面） 人民英雄纪念碑（南面）\" 人民英雄纪念碑（南面） 毛主席纪念堂\" 毛主席纪念堂 人民大会堂\" 人民大会堂 新华门\" 新华门 ","date":"2021-12-27","objectID":"/zh-cn/i-went-to-tiananmen-today/:0:0","tags":["转悠"],"title":"今天到天安门走了走","uri":"/zh-cn/i-went-to-tiananmen-today/"},{"categories":["笔记"],"content":"目前本站已经成型，进入日常维护阶段，现在来回顾一下它是如何建立的。网上已经有各种教程，而本文主要是我自己的经历，不会涉及那些重复的细节。 ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:0:0","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"开始 上上周看到有人用Github作免费网盘，我以前还见过有人专门建了repository来记笔记、写博客，我忽然也想有个写点东西记录自己的地方。我就查了一下如何用Github写博客，我才知道了Github Pages。简单来说它可以免费自动托管静态网页，用它做一个自己的博客是绰绰有余的。 ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:1:0","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"准备 ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:2:0","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"域名 Github Pages是免费的，不过它的网址都长username.github.io这样，感觉不够个性化。好在它是支持自定义域名的，我决定买一个。网站还没有建起来，但我还是先买了。我听说国内买域名需要实名审核，并且审核需要好几天。我一边等待审核通过，一边建网站，这样更省时间。最后我买了kayak4665664.com。 技巧 有的域名首年注册时看起来便宜，但以后续费比.com域名还要贵。 ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:2:1","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"username.github.io 新建了一个repository，进行Pages设置。Github Pages使用Jekyll将纯文本转化为静态网站，所以在设置过程中它会让你选择你的Jekyll主题。我还认真地比较了一下那几个主题，选了我觉得最好看的一个。其实后面很快我就发现，这些主题过于简单，不满足我的需求。之后用git克隆repository到了本地。 ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:2:2","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"设计 我看了一些其他人的网站，初步确定我的网站要有评论、访问统计、站内搜索这几个功能。另外还要加入百度和谷歌分析，并且让它们收录我的网站。 ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:2:3","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"工具 除了Jekyll，还有很多将纯文本转化为静态网站和博客的工具，比如我现在用的Hugo。由于Github Pages默认使用Jekyll，我就选择了Jekyll。 Jekyll基于Ruby，可以用gem来安装。我使用的Mac OS自带一个Ruby，我就直接执行gem install jekyll bundler开始安装Jekyll、Bundler以及它们的依赖。安装一半，出现fatal error: 'ruby/config.h' file not found。谷歌了一下有人说是自带的Ruby版本太低，还有人说是Xcode CommandLineTools的问题。我直接用Homebrew安装了一个新的Ruby。安装之后设置了终端的环境变量，重新执行gem install jekyll bundler，这次安装好了。 警告 我还查了一下怎么清理之前gem install jekyll bundler时的缓存和已安装的包，结果没有找到。我只好手动卸载了那些已安装的包、删除了缓存所在的目录，感觉根本没清理干净。 ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:2:4","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"Jekyll ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:3:0","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"上手 在工作目录执行bundle exec jekyll serve，出现cannot load such file -- webrick (LoadError)。谷歌了一下，用bundle add webrick解决。 在本地预览了一下感觉没有问题，准备push到Github上用手机测试。但是出现了问题，push不上去。谷歌了一下没找到，百度了一下发现可能是proxy的问题，取消git设置的代理后解决。 用手机看了一下，网页是自动适配移动端的。这时候发现这个主题太简陋了，甚至没有分页的功能。刚开始我还准备自己实现出来，但又想想那么多功能都得一个个实现，工作量巨大，我还是找一个功能比较完整的主题吧。 ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:3:1","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"主题 网上有不少Jekyll主题，我最后下载了YAT。它支持不少功能，可以用Disqus和Gitment来评论。 下载之后，想要执行bundle exec jekyll serve预览一下，报错Could not find gem 'jekyll-spaceship (~\u003e 0.2)'。我通过在gem安装jekyll-spaceship时设置版本为0.2来解决。在这里我还发现安装过程卡住了，但没有报错。用Activity Monitor看到Ruby的Rcvd Bytes是一直缓慢增加的，应该是国内网络的问题。谷歌了一下，在Ruby China找到了换源的方法，换源之后成功安装。 再次执行bundle exec jekyll serve，这次可以预览新主题了。 ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:3:2","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"个性化 根据自己的需求来对主题进行个性化修改，如标题、图片等。我本来想用Gitment，但我发现它不能登录Github账号，看了一下它的Issues应该是停止服务了。所以只能用Disqus，我注册了Disqus账号，开启了评论功能。此外我还用了不蒜子进行网站访问量统计，只需两行代码。 之后我开始增加一些内容。在预览内容的过程中渐渐发现了一些问题，这个主题它的字体偏小，不论在浅色还是深色模式下文字与背景的对比较低，总之我感觉读起来费眼睛。然而无法在配置文件中对字体进行设置，我只能直接去挨个修改.scss文件，比较麻烦。而它的翻译功能，调用了谷歌的网页翻译接口，在国内网络下几乎无法使用，导致网页变得卡顿，我直接将源代码中翻译相关的部分删除了。除此之外，Disqus在国内网络下无法登录账号，测试了一下只能使用访客匿名评论，这也是一个缺点。 ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:3:3","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"放弃 个性化之后，我感觉没有问题了。这时忽然想到YAT主题还支持PlantUML、Mermaid、Mathjax、Vedio、Audio等，我应该再测试一下。我直接用作者的markdown文件进行测试，结果发现这些东西都没有正常显示出来。 我还以为是我把源代码改坏了，我直接克隆了一份作者的repository。经测试发现同样不行，看来不是我修改代码的问题。但是问题在哪我也一直没有找到，考虑到这个主题还存在其他的缺点，我选择放弃它。 我又开始找主题，这一次更加仔细。最后找到了LoveIt主题，也就是我现在用的。 这是一个基于Hugo的主题，所以Ruby就没用了，我把它卸载了。 ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:3:4","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"Hugo ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:4:0","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"上手 先用Homebrew安装Hugo，LoveIt文档中推荐安装extended版本的Hugo，而Homebrew安装的Hugo就是extended版本的。 Hugo的目录结构和Jekyll的还是不太一样，用了一些时间才熟悉了。LoveIt的配置项非常多，也是需要先看一看文档的。 大概配置了一下，执行hugo serve -e production --disableFastRender进行预览。 ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:4:1","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"个性化 之后就是个性化地设置，还有： 注册LeanCloud以及Valine用于评论和访问统计 利用https://realfavicongenerator.net生成网站图标 注册Gravartar头像 注册Algolia用于站内搜索 使用node.js执行npm install atomic-algolia安装atomic-algolia，用于自动化上传索引文件至Algolia 注册Mapbox 在这中间我还发现一个问题，本地预览的时候不能显示自定义的404模版，谷歌了一下发现： 信息 hugo server will not automatically load your custom 404.html file, but you can test the appearance of your custom “not found” page by navigating your browser to /404.html. ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:4:2","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"扩展 网站差不多建起来了。执行hugo，就会出现/public目录，把/public和自己的repository同步，就可以把网页托管到Github Pages。之后再用atomic-algolia上传生成的索引文件至Algolia。经过这两个步骤就完成了一次网站的部署。 另外，我又建了一个私有的repository，用于同步/public之外的源代码，所以每次部署都需要多同步一次。为了自动化这三个过程，我写了一个Shell脚本，一步到位。 这时候，我的域名终于通过了实名审核。我开始进行一些扩展： 在Github上设置CNAME 将repository导入Vercel，这样每次更新repository，都会自动部署到Vercel。据说百度不会收录Github Pages托管的网站，而部署到Vercel之后可以被收录 在Vercel中设置自定义域名 加入百度统计和谷歌Analytics 向百度搜索资源平台和谷歌Search Console提交sitemap，在必应Webmaster Tools中直接导入谷歌Search Console中已经提交的sitemap ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:4:3","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["笔记"],"content":"最后 未来我还打算加入一点谷歌广告，这也是大部分网站都有的功能。 总的来说，这次的收获还是很多的！ ","date":"2021-12-22","objectID":"/zh-cn/how-my-wesite-was-built/:5:0","tags":["我的网站","Github Pages","Jekyll","Hugo"],"title":"我的网站是如何建立的？","uri":"/zh-cn/how-my-wesite-was-built/"},{"categories":["日记"],"content":"谷歌收录了我的网站！目前我也向百度和必应提交了sitemap，坐等收录。 现在我的网站已经逐渐走上了正轨，所以我准备下周写一篇文章来回顾一下我的网站是如何建立的。 ","date":"2021-12-19","objectID":"/zh-cn/google-has-indexed-my-website/:0:0","tags":["我的网站"],"title":"谷歌收录了我的网站","uri":"/zh-cn/google-has-indexed-my-website/"},{"categories":["日记"],"content":"这周学校开始了毕设工作，现在我已经确定了题目，正式开始了我的毕业设计。 ","date":"2021-12-18","objectID":"/zh-cn/graduation-project-starts-now/:0:0","tags":["毕业设计"],"title":"现在开始毕设了","uri":"/zh-cn/graduation-project-starts-now/"},{"categories":["日记"],"content":"选题 题目之前已经有了，我的研究生导师给我定的一个网安方向的题目。我觉得这个题目还挺合适的，一方面可以提前学习一些网安的知识，另一方面也完成了我的毕设，算是一箭双雕。 ","date":"2021-12-18","objectID":"/zh-cn/graduation-project-starts-now/:1:0","tags":["毕业设计"],"title":"现在开始毕设了","uri":"/zh-cn/graduation-project-starts-now/"},{"categories":["日记"],"content":"开会 开完毕设动员会之后，和我的指导老师见了面。他给我们几个开了个小会，讲了一堆东西。其实也没什么，主要就是建了一个企业微信群，我的指导老师成了“寨主”。 ","date":"2021-12-18","objectID":"/zh-cn/graduation-project-starts-now/:2:0","tags":["毕业设计"],"title":"现在开始毕设了","uri":"/zh-cn/graduation-project-starts-now/"},{"categories":["日记"],"content":"上报 虽说题目已经有了，但我还是得好好考虑一下，毕竟毕设不是那么随便的。我的指导老师在群里也发了一些参考的题目，都是比较经典的。而那个题目对我来说还是很新颖的，我之前从没做过这个方向。综合来看，我还是更偏向这个网安的题目，而且我的研究生导师也非常希望我去做这个题目。所以我向我的指导老师上报了。 ","date":"2021-12-18","objectID":"/zh-cn/graduation-project-starts-now/:3:0","tags":["毕业设计"],"title":"现在开始毕设了","uri":"/zh-cn/graduation-project-starts-now/"},{"categories":["日记"],"content":"讨论 指导老师如是说： 题目写的不完整， 写一个完整的。 好的，我把我的题目描述得更加完整，等着听老师的意见。消息已读了，但是一直没有回复。真的是莫名其妙啊，不会是他忘记了吧？第二天我发消息再问问他的意见，突然收到了一条59秒的语音。 指导老师如是说： …你那根本不叫题目，你那叫口语，那哪是题目？而且你这个所做的东西吗，说心里话这个搜索性太大了，没看到具体内容我都不好说…那么你这个所做的吧，可大可小。这个对你的要求，我不知道…那么小吗，就是非常简单的就不是太难；如果是要大吗，那是有一定难度的好不好？那么你写那么多，你那哪是一个题目？你那是口语！你口语叫我怎么给你定？你要定下来，难道叫我给你定个口语能做题目吗？你自己都写不出来一个题目叫我来定？给你定一个口语这合适吗？好吧？你自己想好了以后完了再讨论还有基础，否则话没话可说！ 我直接就懵了，他说我的不叫题目。先不论到底是不是题目，他觉得我的不算题目，他有意见、有问题，他可以直接告诉我的吧？我可以去修改和完善啊，一直不回复我能知道他是怎么想的吗？ 我长这么大第一次遇见这种情况，我不知道这对我来说意味着什么。我把这个事情也告诉了我的研究生导师。 她回复的第一句话是： 为啥？ 我也把我指导老师的语音给她看，她帮我确定了一个标题。这里我忽然发现可能有一个误解，我指导老师说的“题目”到底是指“标题”还是“课题”？我查阅了《现代汉语规范词典》，“题目”确实是有多个意思的。看他说我的“题目”是“口语”，看起来他说的题目指的是“标题”了。 如果是这样的话，他为啥一开始不说清楚他说的是一个标题呢？ 好吧，他说我自己都写不出来一个题目，没有讨论的基础。那我就把定好的题目发给了他，希望能有进一步的讨论。但是，他还是一直没话可说。 这时我感觉，什么“标题”还是“课题”可能并不是关键。我想到他在群里说“从这一届开始，教务处准备启用毕业设计管理系统”，“都通过系统进行”，“留有痕迹”。“再者”，“进行工程教育认证”，“各位指导老师严把题目质量关”。我感觉到他应该是对这个题目的专业水平和工作量不太好把关。毕竟他不是研究网安的，往届应该也没有类似的题目，他一直不好下结论，所以一直没话可说。 我把我的想法告诉了我的研究生导师，她建议我给他讲得再详细一些。因此，我写了一个有点像开题报告的文档，写清楚了具体的要做的每一项任务，也初步计划了每一项任务的时间分配。我发给了我的指导老师，并且向他提出如果有问题希望他可以直接说出他的意见。 终于，我的指导老师开始和我讨论了。 指导老师如是说： 你提交吧。 ","date":"2021-12-18","objectID":"/zh-cn/graduation-project-starts-now/:4:0","tags":["毕业设计"],"title":"现在开始毕设了","uri":"/zh-cn/graduation-project-starts-now/"},{"categories":["日记"],"content":"最后 不管怎样，题目定下来了，现在开始做毕设了。 ","date":"2021-12-18","objectID":"/zh-cn/graduation-project-starts-now/:5:0","tags":["毕业设计"],"title":"现在开始毕设了","uri":"/zh-cn/graduation-project-starts-now/"},{"categories":null,"content":"kayak4665664 嘿，很高兴认识你，你找到了我的博客！ 我是kayak4665664，北方工业大学学生。 ","date":"2021-12-13","objectID":"/zh-cn/about/:1:0","tags":null,"title":"关于","uri":"/zh-cn/about/"},{"categories":null,"content":"帮助 ","date":"2021-12-13","objectID":"/zh-cn/about/:2:0","tags":null,"title":"关于","uri":"/zh-cn/about/"},{"categories":null,"content":"1. 如何订阅博客？ 首先你需要安装RSS阅读器，然后点击，将RSS链接导入到你的阅读器中。 如果你不想安装RSS阅读器，也可以把本站加入浏览器收藏夹。 ","date":"2021-12-13","objectID":"/zh-cn/about/:2:1","tags":null,"title":"关于","uri":"/zh-cn/about/"},{"categories":null,"content":"2. 如何在本站评论？ 输入评论，点击提交即可。你还可以输入你的昵称、邮箱和网址。如果你输入了Gravtar邮箱，你的头像可以显示出来。 ","date":"2021-12-13","objectID":"/zh-cn/about/:2:2","tags":null,"title":"关于","uri":"/zh-cn/about/"},{"categories":null,"content":"许可协议 本站所有内容采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可。 ","date":"2021-12-13","objectID":"/zh-cn/about/:3:0","tags":null,"title":"关于","uri":"/zh-cn/about/"},{"categories":null,"content":"您可以自由地： 共享 — 在任何媒介以任何形式复制、发行本作品 演绎 — 修改、转换或以本作品为基础进行创作 只要你遵守许可协议条款，许可人就无法收回你的这些权利。 ","date":"2021-12-13","objectID":"/zh-cn/about/:3:1","tags":null,"title":"关于","uri":"/zh-cn/about/"},{"categories":null,"content":"惟须遵守下列条件： 署名 — 您必须给出适当的署名，提供指向本许可协议的链接，同时标明是否（对原始作品）作了修改。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。 非商业性使用 — 您不得将本作品用于商业目的。 相同方式共享 — 如果您再混合、转换或者基于本作品进行创作，您必须基于与原先许可协议相同的许可协议分发您贡献的作品。 没有附加限制 — 您不得适用法律术语或者技术措施从而限制其他人做许可协议允许的事情。 ","date":"2021-12-13","objectID":"/zh-cn/about/:3:2","tags":null,"title":"关于","uri":"/zh-cn/about/"},{"categories":null,"content":"声明： 您不必因为公共领域的作品要素而遵守许可协议，或者您的使用被可适用的例外或限制所允许。 不提供担保。许可协议可能不会给与您意图使用的所必须的所有许可。例如，其他权利比如形象权、隐私权或人格权可能限制您如何使用作品。 ","date":"2021-12-13","objectID":"/zh-cn/about/:3:3","tags":null,"title":"关于","uri":"/zh-cn/about/"},{"categories":["日记"],"content":"世界你好！ ","date":"2021-12-12","objectID":"/zh-cn/hello-world/:1:0","tags":[],"title":"世界你好！","uri":"/zh-cn/hello-world/"}]