<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>kayak4665664</title>
        <link>https://www.kayak4665664.com/zh-cn/</link>
        <description>kayak4665664的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>contact@kayak4665664.com (kayak4665664)</managingEditor>
            <webMaster>contact@kayak4665664.com (kayak4665664)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</copyright><lastBuildDate>Sat, 04 Jun 2022 17:02:58 &#43;0800</lastBuildDate>
            <atom:link href="https://www.kayak4665664.com/zh-cn/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>下周毕设答辩</title>
    <link>https://www.kayak4665664.com/zh-cn/next-week-i-will-have-my-graduation-project-defense/</link>
    <pubDate>Sat, 04 Jun 2022 17:02:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.kayak4665664.com/zh-cn/next-week-i-will-have-my-graduation-project-defense/</guid>
    <description><![CDATA[<p>毕业设计终于要进入尾声了，6月9日下午最终答辩！</p>
<p>现在我已经完成了毕业设计的大部分工作，所以这两个星期过得还是比较轻松的。但是我现在被隔离了，每天只能呆在屋子里🙃，今天是第4天了。</p>
<p>5月27日中午，我和往常一样去食堂吃了午餐，刚回到宿舍，突然就收到了学校要求毕业生尽快离校的通知。我马上就意识到，这将是我在北方工业大学最后的几天了。</p>
<div align="center">
<a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_1421.jpeg" title="离校通知" data-thumbnail="https://cdn.kayak4665664.com/IMG_1421.jpeg">
        
    </a>
</div>
<p>我冷静了一下，立刻开始计划离校前必须做的事情。首先要考虑的就是我的行李，还好学校承诺是可以免费邮寄的，不然邮寄那么多东西的费用我是有点负担不起的。然而，我并没有用来打包的纸箱子。我问了问辅导员，他只说晚些时候会发放。我感觉他的回答太模糊了，我决定自己先去买几个纸箱子。我去学校快递点找到了那里的老板，他告诉我，我们学院之前找他拿了一百多个纸箱子。我估计了一下，一个学生应该只能领取到1个纸箱子。所以，我和老板买了4个大纸箱子，花了45元。</p>
<p>有了纸箱子，我就回宿舍打包行李了。同时，我还得和我家所在的社区报备。我和社区的工作人员联系了一下，她告诉我，我将会被集中隔离7天，再居家隔离7天。我感觉这并不合理，我在学校期间接受了几十次核酸检测，从来都是阴性的，而且学校一直是封闭的，校外的人进不来，校内的人出不去，我认为我不应该被集中隔离7天。而且据我所知，有一些地方对于从北京返回的学生也是不需要集中隔离的。我向她解释了一下，但是没有用。好在集中隔离是免费的，否则又得花不少钱了。那几天，我看到有新闻说有些大学生返乡后被集中隔离，一天要500元。</p>
<p>打包完行李后，我感觉有点热，我发现我的头发有点长了。一想到我马上还要隔离半个月，我就去理发店把头发剪短了。</p>
<p>晚上，辅导员终于通知可以去领纸箱了，我领到1个纸箱和1个麻袋。再加上我买的4个大纸箱，刚刚好。</p>
<p>5月28日上午，我去超市买了一只记号笔，我得在箱子上标记我的邮寄地址。我走进宿舍楼，和我比较熟的一个宿管阿姨告诉我，现在可以开始到快递点邮寄行李了，让我赶紧去吧。考虑到我要把4个纸箱和1个麻袋从宿舍搬到快递点，单靠两只手是不太容易的，所以我到快递点和老板借了一个平板车。我回到宿舍把这5件东西都标记了我的信息，全放到平板车上去了，一下子都运到了快递点。</p>
<div align="center">
<a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_1332.jpeg" title="平板车" data-thumbnail="https://cdn.kayak4665664.com/IMG_1332.jpeg">
        
    </a>
</div>
<p>由于学校要求毕业生离校的通知比较仓促，快递点老板坦白说他们也不知道怎么处理这么多人的行李，而整个快递点只有2个人。当我推着平板车过去时，我看到快递点外面已经堆了不少箱子了。我有点担心这么多箱子最后会被搞混，所以我请求老板先给我的行李贴上快递单，这样我也方便查快递。等我处理好行李，已经12点多了，到了食堂，煮了一大盘饺子。不得不说，食堂的饺子真的太好吃了，里面肉是真的多。</p>
<div align="center">
<a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_1333.jpeg" title="饺子" data-thumbnail="https://cdn.kayak4665664.com/IMG_1333.jpeg">
        
    </a>
</div>
<p>晚上，我查到我的快递已经发出去了，感觉效率还是很高的。</p>
<p>5月29日下午，快递点老板突然给我打电话。我担心的事情发生了，老板说他们打错了快递单，把别人的一箱行李邮寄到我的地址去了，我的一箱还在他那里😱。我赶紧又跑到了快递点，我的一个箱子果然还躺在货架子上。</p>
<p>5月30日，这一天没有什么特别的事情，都已经处理好了。</p>
<p>5月31日，闹钟还没响我就已经醒了，这是我在学校的最后一天。起床吃早餐。之后，开始打包铺盖，收拾行李，我得带足生活用品，晚上就要开始隔离了。我把铺盖打包进了学院发的小纸箱里，刚好能装进去。我抱着箱子到了快递点，门开着却没有人。等了半小时老板终于来了。</p>
<p>中午，到食堂吃午餐，这是我在学校的最后一顿饭。</p>
<p>我回到了宿舍，躺在了床垫上。这个床垫太大不能邮寄，就留在这里了。</p>
<p>下午快3点时，我整理好了行李箱，关上了宿舍的窗户，拉下电闸，最后看了宿舍一眼，锁上了门。我下楼找到宿管阿姨，退了钥匙。</p>
<p>就这样，我就离开了学校，可能永远不会回去了。</p>
<div align="center">
<a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_1377.JPG" title="NCUT" data-thumbnail="https://cdn.kayak4665664.com/IMG_1377.JPG">
        
    </a>
</div>
<p>上面这张照片是31日的。30日下午我就看见有人在摆弄这几个牌子，不过当时上面还是2021😂。</p>
<p>出了学校，我坐上了地铁去火车站。</p>
<p>晚上8点，火车到站了。很快，开始核查旅客的出发地，我从北京出发，需要被送到隔离酒店。</p>
<p>我填写了一个文件后，我的身份证就被扣押了。他们说会还给我的。我不知道他们是什么人，我认为他们这种行为是违反《中华人民共和国居民身份证法》的。之后就是漫长的等待，活生生站了2个多小时，没有人来处理。总的来说，这是一段不愉快的经历。</p>
<p>晚上10点多，终于有人来接应了，终于把身份证还给我了。之后进行了一次核酸检测。</p>
<p>一行人坐上了车，11点左右终于到达了隔离酒店。又是漫长的等待，我已经很困了，浑身疲劳。再一次核酸检测后，我终于进入了房间。整理好之后，已经将近6月1日的1点了。</p>
<p>有一说一，隔离酒店的环境还是不错的，吃饭喝水也能保证，这4天来我过得还可以。</p>
<p>还有3天集中隔离就要结束了，开始7天的居家隔离，其中6月9日我将进行毕设的答辩。</p>
<p>时间过得太快了，我在3月15日回到学校时，北京还在下雪。一转眼，我突然又回家了。我的4年大学生活马上也要结束了，我会永远记得在北方工业大学的4年。</p>]]></description>
</item><item>
    <title>庆祝五一国际劳动节</title>
    <link>https://www.kayak4665664.com/zh-cn/international-workers-day/</link>
    <pubDate>Sat, 30 Apr 2022 21:34:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.kayak4665664.com/zh-cn/international-workers-day/</guid>
    <description><![CDATA[<p>全世界无产者，联合起来！</p>
<p>共同捍卫劳动者的权利，为一个更公平更美好的世界而奋斗。</p>]]></description>
</item><item>
    <title>今日开题答辩</title>
    <link>https://www.kayak4665664.com/zh-cn/todays-thesis-proposal/</link>
    <pubDate>Wed, 09 Mar 2022 20:57:18 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.kayak4665664.com/zh-cn/todays-thesis-proposal/</guid>
    <description><![CDATA[<p>今天通过腾讯会议参加了开题答辩。</p>
<p>原计划下午一点半开始，不知道为啥等到了两点😶。今天下午这一场一共有24名学生，3位评委老师。我排在第12号，等到了四点终于轮到我了。总体还是比较顺利的，不过有一位老师正好是研究计算机网络的，而我的课题涉及到了不少网络的东西，被抓着问了几个问题。</p>
<p>答辩之后，老师没说可以退出，正好继续待在会议里面看别人答辩。一位保研到计算所的未透露名字的同学，他的毕设是和华为公司合作的，他说他的毕设成果要打败他导师之前的工作，他立志也要投一篇顶会👍。</p>
<p>这样优秀的同学激励我去做好我自己的工作，继续努力吧👍。</p>]]></description>
</item><item>
    <title>又做了个蛋糕🍰</title>
    <link>https://www.kayak4665664.com/zh-cn/made-a-cake-again/</link>
    <pubDate>Fri, 04 Mar 2022 22:42:24 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.kayak4665664.com/zh-cn/made-a-cake-again/</guid>
    <description><![CDATA[<p>感觉面粉放少了，没上次的好吃，还不错吧。</p>
<div align="center">
<a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_1024.jpeg" title="蛋糕" data-thumbnail="https://cdn.kayak4665664.com/IMG_1024.jpeg">
        
    </a>
</div>]]></description>
</item><item>
    <title>LeetCode 42</title>
    <link>https://www.kayak4665664.com/zh-cn/leetcode-42/</link>
    <pubDate>Fri, 18 Feb 2022 14:33:10 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.kayak4665664.com/zh-cn/leetcode-42/</guid>
    <description><![CDATA[<p><a href="https://leetcode.com/problems/trapping-rain-water/description/" target="_blank" rel="noopener noreffer">LeetCode 42.Trapping Rain Water</a>，一道挺有意思的题。</p>
<p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>
<p><strong>示例：</strong></p>
<div align="center">
<a class="lightgallery" href="https://cdn.kayak4665664.com/rainwatertrap.png" title="rainwatertrap" data-thumbnail="https://cdn.kayak4665664.com/rainwatertrap.png">
        
    </a>
</div>
<p><strong>输入</strong>：height = <code>[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]</code><br>
<strong>输出</strong>：<code>6</code><br>
<strong>解释</strong>：上面是由数组 <code>[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]</code> 表示的高度图，在这种情况下，可以接 <code>6</code> 个单位的雨水（蓝色部分表示雨水）。</p>
<p>刚开始想用<code>stack</code>做，不过感觉不太好。然后我就直接上下一层一层算，但是<code>Time Limit Exceeded</code>了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
   <span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">trap</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">index</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="n">index</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">p</span> <span class="p">:</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">auto</span> <span class="n">v</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="n">ans</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>看了看参考答案，主要思路是左右围起来并且求水平面高度：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
   <span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">trap</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">level</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">lower</span> <span class="o">=</span> <span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">height</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">?</span> <span class="n">height</span><span class="p">[</span><span class="n">r</span><span class="o">--</span><span class="p">]</span> <span class="o">:</span> <span class="n">height</span><span class="p">[</span><span class="n">l</span><span class="o">++</span><span class="p">]);</span>
            <span class="n">level</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">lower</span><span class="p">,</span> <span class="n">level</span><span class="p">);</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">level</span> <span class="o">-</span> <span class="n">lower</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>这道题解法应该挺多的。</p>]]></description>
</item><item>
    <title>平遥古城</title>
    <link>https://www.kayak4665664.com/zh-cn/pingyao-ancient-city/</link>
    <pubDate>Sun, 13 Feb 2022 22:30:37 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.kayak4665664.com/zh-cn/pingyao-ancient-city/</guid>
    <description><![CDATA[<p>前几天去平遥古城转了转，整个古城基本上保存了明清时期的原貌。站在城墙上眺望，非常壮观。小吃很多，我最喜欢平遥牛肉和碗托！</p>
<p>没有拍到好看的照片，这里就放两张我在南城墙上拍到的。</p>
<div align="center">
<figure><a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_0986.jpeg" title="南城门" data-thumbnail="https://cdn.kayak4665664.com/IMG_0986.jpeg" data-sub-html="<h2>南城门</h2>">
        
    </a><figcaption class="image-caption">南城门</figcaption>
    </figure>
</div>
<div align="center">
<figure><a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_0988.jpeg" title="红衣大炮" data-thumbnail="https://cdn.kayak4665664.com/IMG_0988.jpeg" data-sub-html="<h2>红衣大炮</h2>">
        
    </a><figcaption class="image-caption">红衣大炮</figcaption>
    </figure>
</div>]]></description>
</item><item>
    <title>链表</title>
    <link>https://www.kayak4665664.com/zh-cn/linked-list/</link>
    <pubDate>Mon, 31 Jan 2022 22:24:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.kayak4665664.com/zh-cn/linked-list/</guid>
    <description><![CDATA[<p>一个双向链表的C++模版。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">ListNode</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">val</span><span class="p">;</span>
    <span class="n">ListNode</span> <span class="o">*</span><span class="n">next</span><span class="p">,</span> <span class="o">*</span><span class="n">prior</span><span class="p">;</span>
    <span class="n">ListNode</span><span class="p">()</span> <span class="o">:</span> <span class="n">val</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">next</span><span class="p">(</span><span class="k">nullptr</span><span class="p">),</span> <span class="n">prior</span><span class="p">(</span><span class="k">nullptr</span><span class="p">)</span> <span class="p">{}</span>
    <span class="n">ListNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="o">:</span> <span class="n">val</span><span class="p">(</span><span class="n">v</span><span class="p">),</span> <span class="n">next</span><span class="p">(</span><span class="k">nullptr</span><span class="p">),</span> <span class="n">prior</span><span class="p">(</span><span class="k">nullptr</span><span class="p">)</span> <span class="p">{}</span>
    <span class="n">ListNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">,</span> <span class="n">ListNode</span> <span class="o">*</span><span class="n">next</span><span class="p">,</span> <span class="n">ListNode</span> <span class="o">*</span><span class="n">prior</span><span class="p">)</span>
        <span class="o">:</span> <span class="n">val</span><span class="p">(</span><span class="n">v</span><span class="p">),</span> <span class="n">next</span><span class="p">(</span><span class="n">next</span><span class="p">),</span> <span class="n">prior</span><span class="p">(</span><span class="n">prior</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="n">ListNode</span> <span class="o">*</span><span class="nf">insert</span><span class="p">(</span><span class="n">ListNode</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ListNode</span> <span class="o">*</span><span class="n">n</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="p">;</span>
    <span class="n">n</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
    <span class="n">n</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">n</span><span class="o">-&gt;</span><span class="n">prior</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="n">n</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prior</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">erase</span><span class="p">(</span><span class="n">ListNode</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">p</span><span class="o">-&gt;</span><span class="n">prior</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prior</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">prior</span><span class="p">;</span>
    <span class="k">delete</span> <span class="n">p</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="n">ListNode</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">;</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; -&gt; &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">;</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">ListNode</span> <span class="o">*</span><span class="n">front</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">ListNode</span> <span class="o">*</span><span class="n">n</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">insert</span><span class="p">(</span><span class="n">insert</span><span class="p">(</span><span class="n">front</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="mi">4</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">prior</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">print</span><span class="p">(</span><span class="n">front</span><span class="p">);</span>  <span class="c1">// 1 -&gt; 2 -&gt; 3 -&gt; 4
</span><span class="c1"></span>    <span class="n">erase</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
    <span class="n">print</span><span class="p">(</span><span class="n">front</span><span class="p">);</span>  <span class="c1">// 1 -&gt; 2 -&gt; 4
</span><span class="c1"></span>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ol>
<li><a href="https://leetcode.com/problems/merge-two-sorted-lists/description/" target="_blank" rel="noopener noreffer">LeetCode 21. Merge Two Sorted Lists</a></li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
   <span class="k">public</span><span class="o">:</span>
    <span class="n">ListNode</span><span class="o">*</span> <span class="n">mergeTwoLists</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">list1</span><span class="p">,</span> <span class="n">ListNode</span><span class="o">*</span> <span class="n">list2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">list1</span> <span class="o">==</span> <span class="k">nullptr</span> <span class="o">&amp;&amp;</span> <span class="n">list2</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span>
            <span class="k">return</span> <span class="k">nullptr</span><span class="p">;</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">list1</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">list2</span><span class="p">;</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">list2</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">list1</span><span class="p">;</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">ListNode</span> <span class="o">*</span><span class="n">front</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">p1</span><span class="p">,</span> <span class="o">*</span><span class="n">p2</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">list1</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">&lt;=</span> <span class="n">list2</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">front</span> <span class="o">=</span> <span class="n">list1</span><span class="p">;</span>
                <span class="n">p1</span> <span class="o">=</span> <span class="n">list1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
                <span class="n">p2</span> <span class="o">=</span> <span class="n">list2</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">front</span> <span class="o">=</span> <span class="n">list2</span><span class="p">;</span>
                <span class="n">p1</span> <span class="o">=</span> <span class="n">list1</span><span class="p">;</span>
                <span class="n">p2</span> <span class="o">=</span> <span class="n">list2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">p</span> <span class="o">=</span> <span class="n">front</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">p1</span> <span class="o">!=</span> <span class="k">nullptr</span> <span class="o">&amp;&amp;</span> <span class="n">p2</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">p1</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">&lt;=</span> <span class="n">p2</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p1</span><span class="p">;</span>
                    <span class="n">p1</span> <span class="o">=</span> <span class="n">p1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p2</span><span class="p">;</span>
                    <span class="n">p2</span> <span class="o">=</span> <span class="n">p2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">p1</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span>
                <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p2</span><span class="p">;</span>
            <span class="k">else</span>
                <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p1</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">front</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><ol start="2">
<li><a href="https://leetcode.com/problems/merge-k-sorted-lists/description/" target="_blank" rel="noopener noreffer">LeetCode 23. Merge k Sorted Lists</a></li>
</ol>
<p>直接用这个方法导致<code>Time Limit Exceeded</code>，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
   <span class="k">public</span><span class="o">:</span>
    <span class="n">ListNode</span> <span class="o">*</span><span class="n">mergeKLists</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">ListNode</span> <span class="o">*&gt;</span> <span class="o">&amp;</span><span class="n">lists</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">min</span> <span class="o">=</span> <span class="mh">0x3f3f3f</span><span class="p">;</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">front</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">p1</span><span class="p">;</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">ListNode</span> <span class="o">*</span><span class="p">,</span> <span class="n">ListNode</span> <span class="o">*&gt;</span> <span class="n">ptr</span><span class="p">;</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">ListNode</span> <span class="o">*&gt;</span> <span class="n">ps</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">list</span> <span class="p">:</span> <span class="n">lists</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">list</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                <span class="n">ptr</span><span class="p">[</span><span class="n">list</span><span class="p">]</span> <span class="o">=</span> <span class="n">list</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">min</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">;</span>
                    <span class="n">front</span> <span class="o">=</span> <span class="n">list</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">lists</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">||</span> <span class="o">!</span><span class="n">flag</span><span class="p">)</span>
            <span class="k">return</span> <span class="k">nullptr</span><span class="p">;</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">ptr</span><span class="p">[</span><span class="n">front</span><span class="p">]</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">[</span><span class="n">front</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="n">p</span> <span class="o">=</span> <span class="n">front</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">min</span> <span class="o">=</span> <span class="mh">0x3f3f3f</span><span class="p">;</span>
                <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">list</span> <span class="p">:</span> <span class="n">lists</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">ptr</span><span class="p">[</span><span class="n">list</span><span class="p">]</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
                        <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">ptr</span><span class="p">[</span><span class="n">list</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">)</span> <span class="p">{</span>
                            <span class="n">min</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">[</span><span class="n">list</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">;</span>
                            <span class="n">p1</span> <span class="o">=</span> <span class="n">list</span><span class="p">;</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
                <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">[</span><span class="n">p1</span><span class="p">];</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
                <span class="n">ptr</span><span class="p">[</span><span class="n">p1</span><span class="p">]</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">[</span><span class="n">p1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">front</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>用优先队列就可以通过了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
   <span class="k">public</span><span class="o">:</span>
    <span class="n">ListNode</span> <span class="o">*</span><span class="n">mergeKLists</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">ListNode</span> <span class="o">*&gt;</span> <span class="o">&amp;</span><span class="n">lists</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ListNode</span> <span class="o">*</span><span class="n">front</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
        <span class="k">auto</span> <span class="n">cmp</span> <span class="o">=</span> <span class="p">[](</span><span class="n">ListNode</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="n">ListNode</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">&gt;=</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">;</span>
        <span class="p">};</span>  <span class="c1">// ptr.top() is minimal.
</span><span class="c1"></span>        <span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">ListNode</span> <span class="o">*</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">ListNode</span> <span class="o">*&gt;</span><span class="p">,</span> <span class="k">decltype</span><span class="p">(</span><span class="n">cmp</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">ptr</span><span class="p">(</span><span class="n">cmp</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">list</span> <span class="p">:</span> <span class="n">lists</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">list</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="n">ptr</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">lists</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">||</span> <span class="n">ptr</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
            <span class="k">return</span> <span class="k">nullptr</span><span class="p">;</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">front</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
            <span class="n">ptr</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">front</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="n">ptr</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">front</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
            <span class="n">p</span> <span class="o">=</span> <span class="n">front</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">ptr</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
                <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
                <span class="n">ptr</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="n">ptr</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">front</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>二分查找</title>
    <link>https://www.kayak4665664.com/zh-cn/binary-search/</link>
    <pubDate>Sat, 29 Jan 2022 22:01:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.kayak4665664.com/zh-cn/binary-search/</guid>
    <description><![CDATA[<p>这是二分查找算法的一个C++模版，以及C++标准模版库<code>&lt;algorithm&gt;</code>头文件中二分查找函数<code>std::lower_bound</code>和<code>std::upper_bound</code>的简单应用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">nums</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">};</span>

<span class="kt">int</span> <span class="nf">binary_search</span><span class="p">(</span><span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">,</span> <span class="kt">int</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">mid</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">pos</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">pos</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">binary_search</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>                  <span class="c1">// 2
</span><span class="c1"></span>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">lower_bound</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">nums</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">-</span> <span class="n">nums</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 2, &gt;= 3
</span><span class="c1"></span>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">upper_bound</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">nums</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">-</span> <span class="n">nums</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 3, &gt; 3
</span><span class="c1"></span>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>用这个模版做了一道LeetCode的<a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/" target="_blank" rel="noopener noreffer">34. Find First and Last Position of Element in Sorted Array</a>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
   <span class="k">public</span><span class="o">:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">searchRange</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
            <span class="k">return</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">};</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">binary_search</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">target</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">pos</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">};</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">pos</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
                <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&gt;=</span> <span class="mi">0</span>  <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span> <span class="o">--</span><span class="n">left</span><span class="p">;</span>
                <span class="k">while</span> <span class="p">(</span><span class="n">right</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span> <span class="o">++</span><span class="n">right</span><span class="p">;</span>
                <span class="k">return</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">{</span><span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span> <span class="o">-</span> <span class="mi">1</span><span class="p">};</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="nf">binary_search</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">,</span> <span class="kt">int</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">mid</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="n">pos</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">pos</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>做了个蛋糕🍰</title>
    <link>https://www.kayak4665664.com/zh-cn/made-a-cake/</link>
    <pubDate>Tue, 18 Jan 2022 22:00:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.kayak4665664.com/zh-cn/made-a-cake/</guid>
    <description><![CDATA[<p>真好吃！</p>
<div align="center">
<a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_0917.jpeg" title="蛋糕" data-thumbnail="https://cdn.kayak4665664.com/IMG_0917.jpeg">
        
    </a>
</div>
<div align="center">
<a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_0919.jpeg" title="蛋糕" data-thumbnail="https://cdn.kayak4665664.com/IMG_0919.jpeg">
        
    </a>
</div>]]></description>
</item><item>
    <title>今天到天安门走了走</title>
    <link>https://www.kayak4665664.com/zh-cn/i-went-to-tiananmen-today/</link>
    <pubDate>Mon, 27 Dec 2021 19:52:24 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.kayak4665664.com/zh-cn/i-went-to-tiananmen-today/</guid>
    <description><![CDATA[<p>今天出来走了走，拍了一些照片。蓝蓝的天，感觉真不错！</p>
<div align="center">
<figure><a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_0807.jpeg" title="天安门城楼" data-thumbnail="https://cdn.kayak4665664.com/IMG_0807.jpeg" data-sub-html="<h2>天安门城楼</h2>">
        
    </a><figcaption class="image-caption">天安门城楼</figcaption>
    </figure>
</div>
<div align="center">
<figure><a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_0815.jpeg" title="人民英雄纪念碑（北面）" data-thumbnail="https://cdn.kayak4665664.com/IMG_0815.jpeg" data-sub-html="<h2>人民英雄纪念碑（北面）</h2>">
        
    </a><figcaption class="image-caption">人民英雄纪念碑（北面）</figcaption>
    </figure>
</div>
<div align="center">
<figure><a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_0819.jpeg" title="人民英雄纪念碑（南面）" data-thumbnail="https://cdn.kayak4665664.com/IMG_0819.jpeg" data-sub-html="<h2>人民英雄纪念碑（南面）</h2>">
        
    </a><figcaption class="image-caption">人民英雄纪念碑（南面）</figcaption>
    </figure>
</div>
<div align="center">
<figure><a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_0821.jpeg" title="毛主席纪念堂" data-thumbnail="https://cdn.kayak4665664.com/IMG_0821.jpeg" data-sub-html="<h2>毛主席纪念堂</h2>">
        
    </a><figcaption class="image-caption">毛主席纪念堂</figcaption>
    </figure>
</div>
<div align="center">
<figure><a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_0816.jpeg" title="人民大会堂" data-thumbnail="https://cdn.kayak4665664.com/IMG_0816.jpeg" data-sub-html="<h2>人民大会堂</h2>">
        
    </a><figcaption class="image-caption">人民大会堂</figcaption>
    </figure>
</div>
<div align="center">
<figure><a class="lightgallery" href="https://cdn.kayak4665664.com/IMG_0828.jpeg" title="新华门" data-thumbnail="https://cdn.kayak4665664.com/IMG_0828.jpeg" data-sub-html="<h2>新华门</h2>">
        
    </a><figcaption class="image-caption">新华门</figcaption>
    </figure>
</div>]]></description>
</item></channel>
</rss>
